(Note: Download links for released files no longer work (http://s3.voneicken.com))

See sources at https://github.com/jeelabs/esp-link/releases

Release 3.2.47 alpha Pre-release
Warning: some users have trouble getting this release to work. After flashing nothing happens. Please use 3.0.14 instead for now.
I have been unable to reproduce the problem so far, all my modules work fine. The symptoms are that after flashing the esp8266 doesn't boot into the firmware and only one line is printed on the uart. I'm trying to find a solution but without being able to reproduce the problem it's a bit difficult.

Warning: this is an Alpha release
For a stable release, please use Release 3.0.14

Version v3.2 includes some improvements and bug fixes over v3.0.14, notably support for programming Arduino Mega with an ATmega2560 chip. The first alpha for v3.2 was released June 17th 2017 as v3.1.85. (v3.1 was never released further because I messed-up the numbering, so I moved on to v3.2.x.)

Download: http://s3.voneicken.com/esp-link/esp-link-v3.2.47-g9c6530d.tgz

For flashing and upgrade instructions see FLASHING.md

New in 3.2 over 2.x
support to program ATmega2560
support for rs485 serial protocol
split up large TCP responses before forwarding to attached uC
custom web pages
rudimentary support for outgoing UDP and TCP connections initiated by the attached uC
Telnet protocol controls for baud rate, parity, data size, break
switch to Espressif SDK v2.1.0
Features:
port 23 transparent bridge, port 2323 programming bridge
AVR, ATmega & ARM flashing support (using port 23 and 2323)
built-in programmer for AVRs & ATmega2560, auto-switches baud rate to 9600/57600/115200
outbound HTTP REST requests from attached microcontroller using espduino library and protocol
built-in MQTT client that can be used by attached uC using espduino library and protocol
upload web pages to esp-link and let esp-link make callbacks to the attached uC to fill in values dynamically or handle button clicks and form submissions
over-the-air (OTA) reflashing of the esp if your module has 1MB or more flash (e.g. esp-12 but not esp-01), now using either commandlin push model or web-browser upload model
console page to see the attached uC's output
simple debug log page to view the esp-link's own os_printf output
buttons to reset the uC and change the baud rate
pin configuration selector to change GPIO function assignments
web page to configure MQTT client and built-in status message publishing
mDNS, syslog, and SNTP support
saving of configuration changes in flash
v3.2 must be built with the Espressif "NONOS" SDK 2.1.0


Release 3.0.14 Latest
Version v3.0 includes many bug fixes and several improvements over v2.2.3. v3.0.14 was released as an alpha Dec 16, 2016 and promoted to stable Jun 17, 2017.

Download: http://s3.voneicken.com/esp-link/esp-link-v3.0.14-g963ffbb.tgz

For flashing and upgrade instructions see
FLASHING.md

New in 3.0 over 2.x
custom web pages
rudimentary support for outgoing UDP and TCP connections initiated by the attached uC
Telnet protocol controls for baud rate, parity, data size
Features:
port 23 transparent bridge, port 2323 programming bridge
AVR & ARM flashing support (using port 23 and 2323)
built-in programmer for AVRs, auto-switches baud rate to 9600/57600/115200
outbound HTTP REST requests from attached microcontroller using espduino library and protocol
built-in MQTT client that can be used by attached uC using espduino library and protocol
upload web pages to esp-link and let esp-link make callbacks to the attached uC to fill in values dynamically or handle button clicks and form submissions
over-the-air (OTA) reflashing of the esp if your module has 1MB or more flash (e.g. esp-12 but not esp-01), now using either commandlin push model or web-browser upload model
console page to see the attached uC's output
simple debug log page to view the esp-link's own os_printf output
buttons to reset the uC and change the baud rate
pin configuration selector to change GPIO function assignments
web page to configure MQTT client and built-in status message publishing
mDNS, syslog, and SNTP support
saving of configuration changes in flash
v3.0 must be built with the Espressif "NONOS" SDK 2.0.0 plus the 20160809 patch
Known issues:

Setting the baud rate via telnet escapes has issues, see #239. This is fixed in later versions.


Release 2.2.beta2 Pre-release
This is a beta release
For a stable release, please use https://github.com/jeelabs/esp-link/releases/tag/v2.1.7

Features:
port 23 transparent bridge, port 2323 programming bridge
AVR, ARM & esp8266 flashing support (using port 23 and 2323)
built-in programmer for AVRs, auto-switches baud rate to 9600/57600/115200
outbound HTTP REST requests from attached microcontroller using espduino library and protocol
built-in MQTT client that can be used by attached uC using espduino library and protocol
over-the-air (OTA) reflashing of the esp if your module has 1MB or more flash (e.g. esp-12 but not esp-01)
console page to see the attached uC's output
simple debug log page to view the esp-link's own os_printf output
buttons to reset the uC and change the baud rate
pin configuration selector to change GPIO function assignments
web page to configure MQTT client and built-in status message publishing
mDNS, syslog, and SNTP support
saving of configuration changes in flash
Warnings
The 2.2 series breaks SLIP (mqtt & rest) compatibility with 2.1.7: the standard slip control characters are used and all the REST and MQTT commands have been overhauled. Please also use the new el-client library on the arduino side.
Over-the-air upgrades of esp-link are no longer supported on esp8266 modules with 512KB of flash. You need
a module with more flash (such as an esp-12) for this to be possible. On the bright side: all the other features of
esp-link work great on the older modules.
Changes since v2.2.beta1:
Fix serialization issue with SLIP protocol (caused all kinds of problems)
Fix issue sync-ing SLIP dues to incorrect integer promotion
Handle malloc failure in syslog compose
new REST and MQTT library: el-client
Additional changes since v2.2.beta0:
new flashing algorithm for AVRs that supports arduino bootloader and optiboot
support for configuring the Wifi AP parameters and keeping the AP always on
fix issue causing RX pullup to always be on
fix UI issues with description field
compiled with SDK 1.5.1 (uses the new boot_v1.5.bin bootloader, but the 1.4 one works as well)
Additional changes since v2.1.7:
mDNS support (multicast DNS announcement of esp-link's hostname)
SNTP support (simple network time protocol) so esp-link has the correct time
Syslog support
Install via serial upload
The short version for the serial install is:

flash boot_v1.5.bin from the official esp_iot_sdk_v1.5.1 and included in the release tgz to 0x00000
flash blank.bin from the official SDK and also included in the tgz to 0x3FE000
flash user1.bin to 0x01000
be sure to use the commandline flags when flashing the bootloader to set the correct flash size
32Mbit / 4Mbyte module
On Linux using esptool.py this turns into the following for a 32mbit=4MByte flash chip, such as an esp-12 module typically has:

curl -L https://github.com/jeelabs/esp-link/releases/download/v2.2.beta2/esp-link-v2.2.beta2.tgz | \
    tar xzf -
cd esp-link-v2.2.beta2
esptool.py --port /dev/ttyUSB0 --baud 460800 write_flash -fs 32m -ff 80m \
    0x00000 boot_v1.5.bin 0x1000 user1.bin 0x3FE000 blank.bin
I use a high baud rate as shown above because I'm impatient, but that's not required.

4Mbit / 512Kbyte module
curl -L https://github.com/jeelabs/esp-link/releases/download/v2.2.beta2/esp-link-v2.2.beta2.tgz | \
    tar xzf -
cd esp-link-v2.2.beta2
esptool.py --port /dev/ttyUSB0 --baud 460800 write_flash -fs 4m -ff 40m \
    0x00000 boot_v1.5.bin 0x1000 user1.bin 0x7E000 blank.bin
The `-fs 4m -ff40m' options say 4Mbits and 40Mhz as opposed to 32Mbits at 80Mhz for the 4MByte flash modules. Note the different address for blank.bin (the SDK stores its wifi settings near the end of flash, so it changes with flash size).

Upgrade over-the-air
To upgrade from an earlier version 2.x of esp-link:

curl -L https://github.com/jeelabs/esp-link/releases/download/v2.2.beta2/esp-link-v2.2.beta2.tgz | \
    tar xzf -
cd esp-link-2.2.beta2
./wiflash <esp-hostname> user1.bin user2.bin
Installing esptool.py
On Linux use esptool.py to flash the esp8266.
If you're a little python challenged then the following install instructions might help:

Install ez_setup with the following two commands (I believe this will do something
reasonable if you already have it):

wget https://bootstrap.pypa.io/ez_setup.py
python ez_setup.py
Install esptool.py:

git clone https://github.com/themadinventor/esptool.git
cd esptool
python setup.py install
cd ..
esptool.py -h


